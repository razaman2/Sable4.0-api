"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const vue_class_component_1 = require("vue-class-component");
const vue_property_decorator_1 = require("vue-property-decorator");
const event_emitter_1 = __importDefault(require("@razaman2/event-emitter"));
const object_manager_1 = __importDefault(require("@razaman2/object-manager"));
class ReactiveVue extends vue_class_component_1.Vue {
    constructor() {
        super(...arguments);
        // @Prop({
        //     default: () => false
        // }) protected readonly data?: { [p: string]: any };
        this.notifications = new event_emitter_1.default();
        this.loading = {
            status: false,
            text: this.getDefaultLoadingText()
        };
        this.state = this.getDefaultData();
        // protected mapBaseMethods(component: { [p: string]: any }) {
        //     return Object.entries(component.super.options.methods).reduce((methods: { [p: string]: Function }, [key, value]: [string, any]) => {
        //         if (!RegExp(key).test('getBaseMethods')) {
        //             if (component.options.methods[key]) {
        //                 if (component.options.methods[key] !== value) {
        //                     methods[key] = value;
        //                 } else {
        //                     methods[key] = component.options.methods[key];
        //                 }
        //             }
        //         }
        //
        //         return methods;
        //     }, Object.setPrototypeOf({
        //         getBaseMethods: () => {
        //             return this.mapBaseMethods(component.super);
        //         },
        //         getComponentName: () => {
        //             return component.super.name;
        //         }
        //     }, this));
        // }
        //
        // public getBaseMethods() {
        //     return this.mapBaseMethods((this.constructor as { [p: string]: any }));
        // }
    }
    loadingStatus(status) {
        if (status !== undefined) {
            this.loading.status = status;
        }
        return this.loading.status;
    }
    loadingText(message) {
        if (message !== undefined) {
            this.loading.text = message;
        }
        return this.loading.text;
    }
    async safeRequest(request) {
        this.loadingStatus(true);
        try {
            return await request.try();
        }
        catch (e) {
            return request.catch ? await request.catch(e) : console.log(e);
        }
        finally {
            if (request.finally) {
                await request.finally();
            }
            this.loadingStatus(false);
        }
    }
    render() {
        return this.renderless ? vue_1.h('div') : this.template();
    }
    // START HTML NODES
    template() {
        return vue_1.h('p', {
            style: 'color:red;'
        }, 'Template Not Provided!');
    }
    // END HTML NODES
    localWrite(data, state = this.state) {
        console.log('Local Write:', data, state);
        Object.entries(data).forEach(([key, value]) => {
            console.log('Iteration:', data, key, value);
            if (value && typeof value === "object") {
                this.localWrite(data, state[key]);
            }
            state[key] = `${state[key]}${value}`;
        });
        console.log('Compiled Data:', Object.assign(state, data));
        if (this.logging) {
            console.log(`%cSet Data: ${this.constructor.name}`, 'color: orange;', this, data, this.getData());
        }
    }
    // protected super(name: string, ...params: Array<any>) {
    //     return (this.constructor as { [p: string]: any }).super.options.methods[name].call(this, ...params);
    // }
    getData(path = '', alternative) {
        const params = (typeof path === 'string') ? {
            path,
            alternative
        } : path;
        return this.model ? this.model.getData(params) : object_manager_1.default.on(this.state).get(params.path, params.alternative);
    }
    setData(data) {
        this.model ? this.model.setData(data) : this.localWrite(data);
        return this;
    }
    getDefaultData() {
        return {};
    }
    getDefaultLoadingText() {
        return 'Please wait...';
    }
    isValid() {
        return false;
    }
}
__decorate([
    vue_property_decorator_1.Prop({
        type: Object
    })
], ReactiveVue.prototype, "model", void 0);
__decorate([
    vue_property_decorator_1.Prop({
        type: Boolean,
        default: () => true
    })
], ReactiveVue.prototype, "logging", void 0);
__decorate([
    vue_property_decorator_1.Prop({
        type: Boolean,
        default: () => false
    })
], ReactiveVue.prototype, "renderless", void 0);
__decorate([
    vue_property_decorator_1.Prop({
        type: Object
    })
], ReactiveVue.prototype, "config", void 0);
exports.default = ReactiveVue;
//# sourceMappingURL=index.js.map