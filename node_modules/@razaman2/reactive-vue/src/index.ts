import {
    h
} from 'vue';
import {Vue} from "vue-class-component";
import {
    Prop
} from 'vue-property-decorator';
import EventEmitter
    from "@razaman2/event-emitter";
import ObjectManager
    from "@razaman2/object-manager";

export default class ReactiveVue extends Vue {
    @Prop({
        type: Object
    }) protected readonly model?: ReactiveVue;

    @Prop({
        type: Boolean,
        default: () => true
    }) protected readonly logging?: boolean;

    @Prop({
        type: Boolean,
        default: () => false
    }) protected readonly renderless?: boolean;

    @Prop({
        type: Object
    }) protected readonly config?: { [p: string]: any };

    // @Prop({
    //     default: () => false
    // }) protected readonly data?: { [p: string]: any };

    public notifications = new EventEmitter();

    private loading: { status: boolean; text: string } = {
        status: false,
        text: this.getDefaultLoadingText()
    };

    protected state: { [p: string]: any } = this.getDefaultData();

    protected loadingStatus(status?: boolean) {
        if (status !== undefined) {
            this.loading.status = status;
        }

        return this.loading.status;
    }

    protected loadingText(message?: string) {
        if (message !== undefined) {
            this.loading.text = message;
        }

        return this.loading.text;
    }

    protected async safeRequest(request: {
        try: Function,
        catch?: (error: any) => any,
        finally?: Function,
        loading?: { status: boolean }
    }) {
        this.loading ? (this.loading.status = true) : this.loadingStatus(true);
        try {
            return await request.try();
        } catch (e) {
            return request.catch ? await request.catch(e) : console.log(e);
        } finally {
            if (request.finally) {
                await request.finally();
            }

            this.loading ? (this.loading.status = false) : this.loadingStatus(false);
        }
    }

    public render() {
        return this.renderless ? h('div') : this.template();
    }

    // START HTML NODES
    public template() {
        return h('p', {
            style: 'color:red;'
        }, 'Template Not Provided!');
    }

    // END HTML NODES

    protected localWrite(data: object) {
        const input = ObjectManager.on(data);
        const output = ObjectManager.on(this.state);

        input.paths().forEach((path) => {
            output.set(path, `${output.get(path, '')}${input.get(path)}`);
            // if ((path !== null) && (path !== undefined)) {
            // }
        });

        if (this.logging) {
            console.log(`%cSet Data:`, 'color: orange;', this, data, this.getData());
        }
    }

    public getData(path: string | { path?: string; alternative?: any } = '', alternative?: any): any {
        const params = (typeof path === 'string') ? {
            path,
            alternative
        } : path;

        return this.model ? this.model.getData(params) : ObjectManager.on(this.state).get(params.path, params.alternative);
    }

    public setData(data: object) {
        this.model ? this.model.setData(data) : this.localWrite(data);

        return this;
    }

    public getDefaultData(): { [p: string]: any } {
        return {};
    }

    public getDefaultLoadingText(): string {
        return 'Please wait...';
    }

    public isValid(): boolean {
        return false;
    }
}
