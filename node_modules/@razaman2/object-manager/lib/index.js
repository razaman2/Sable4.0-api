"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ObjectManager {
    constructor(object) {
        this.object = object;
    }
    paths(object) {
        const subject = object !== null && object !== void 0 ? object : this.object;
        return Object.entries(subject).reduce((paths, [key, val]) => {
            try {
                if (/^({.+}|\[.+])$/.test(JSON.stringify(val))) {
                    this.paths(val).forEach((item) => {
                        paths.push(`${key}.${item}`);
                    });
                }
                else {
                    paths.push(`${key}`);
                }
            }
            catch (e) {
                paths.push(`${key}`);
            }
            return paths;
        }, []);
    }
    get(path, alternative = undefined) {
        const requested = `${path}`.split('.').reduce((object, current) => {
            try {
                return object[current];
            }
            catch (e) {
                return alternative;
            }
        }, this.object);
        return (requested !== undefined) ? requested : path ? alternative : this.object;
    }
    set(path, value, object) {
        const subject = object !== null && object !== void 0 ? object : this.object;
        const paths = path.split('.');
        paths.reduce((accumulator, current, index) => {
            if (current.length) {
                if (index === (paths.length - 1)) {
                    accumulator[current] = value;
                }
                else if (accumulator.hasOwnProperty(current)) {
                    return accumulator[current];
                }
                else {
                    accumulator[current] = RegExp(`(?<=${current}\\.)\\d+`).test(path) ? [] : {};
                }
                return accumulator[current];
            }
        }, subject);
        return subject;
    }
    copy(object) {
        const subject = ObjectManager.on(object);
        subject.paths().forEach((path) => {
            this.set(path, subject.get(path));
        });
        return this;
    }
    data() {
        return this.object;
    }
    clone() {
        return JSON.parse(JSON.stringify(this.object));
    }
    static on(object) {
        return new ObjectManager(object !== null && object !== void 0 ? object : {});
    }
}
exports.default = ObjectManager;
//# sourceMappingURL=index.js.map